/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionArgs = {
  mintArgs: Uint8Array;
  label: beet.COption<string>;
};
/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export const mintStruct = new beet.FixableBeetArgsStruct<
  MintInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['mintArgs', beet.bytes],
    ['label', beet.coption(beet.utf8String)],
  ],
  'MintInstructionArgs',
);
/**
 * Accounts required by the _mint_ instruction
 *
 * @property [] candyGuard
 * @property [] candyMachineProgram
 * @property [_writable_] candyMachine
 * @property [_writable_, **signer**] payer
 * @property [] instructionSysvarAccount
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionAccounts = {
  candyGuard: web3.PublicKey;
  candyMachineProgram: web3.PublicKey;
  candyMachine: web3.PublicKey;
  payer: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  instructionSysvarAccount: web3.PublicKey;
};

export const mintInstructionDiscriminator = [51, 57, 225, 47, 182, 146, 137, 166];

/**
 * Creates a _Mint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Mint
 * @category generated
 */
export function createMintInstruction(
  accounts: MintInstructionAccounts,
  args: MintInstructionArgs,
  programId = new web3.PublicKey('FhCHXHuD6r2iCGwHgqcgnDbwXprLf22pZcArSp4Si4n7'),
) {
  const [data] = mintStruct.serialize({
    instructionDiscriminator: mintInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.candyGuard,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachineProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructionSysvarAccount,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
